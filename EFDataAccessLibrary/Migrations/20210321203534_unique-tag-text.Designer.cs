// <auto-generated />
using System;
using EFDataAccessLibrary.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace EFDataAccessLibrary.Migrations
{
    [DbContext(typeof(RecipesContext))]
    [Migration("20210321203534_unique-tag-text")]
    partial class uniquetagtext
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.4");

            modelBuilder.Entity("Models.Comment", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CommentedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("RecipeID")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250) CHARACTER SET utf8mb4");

                    b.HasKey("ID");

                    b.HasIndex("RecipeID");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("Models.HomeIngredient", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<int?>("RecipeID")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4");

                    b.HasKey("ID");

                    b.HasIndex("RecipeID");

                    b.ToTable("HomeIngredients");
                });

            modelBuilder.Entity("Models.Ingredient", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<int?>("RecipeID")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4");

                    b.HasKey("ID");

                    b.HasIndex("RecipeID");

                    b.ToTable("Ingredients");
                });

            modelBuilder.Entity("Models.Recipe", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("Favorite")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("ForHowMany")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("varchar(3)")
                        .HasComment("2-3 / 4-5");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<string>("TimeToMake")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("varchar(5)")
                        .HasComment("Court / Moyen / Long");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("varchar(3)")
                        .HasComment("Old / New");

                    b.HasKey("ID");

                    b.ToTable("Recipes");
                });

            modelBuilder.Entity("Models.Step", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<int?>("RecipeID")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500) CHARACTER SET utf8mb4");

                    b.HasKey("ID");

                    b.HasIndex("RecipeID");

                    b.ToTable("Steps");
                });

            modelBuilder.Entity("Models.Tag", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20) CHARACTER SET utf8mb4");

                    b.HasKey("ID");

                    b.HasIndex("Text")
                        .IsUnique();

                    b.ToTable("Tags");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Text = "Porc"
                        },
                        new
                        {
                            ID = 2,
                            Text = "Poulet"
                        },
                        new
                        {
                            ID = 3,
                            Text = "Boeuf"
                        },
                        new
                        {
                            ID = 4,
                            Text = "Crevettes"
                        },
                        new
                        {
                            ID = 5,
                            Text = "Poisson"
                        },
                        new
                        {
                            ID = 6,
                            Text = "Pâtes"
                        },
                        new
                        {
                            ID = 7,
                            Text = "Végé"
                        },
                        new
                        {
                            ID = 8,
                            Text = "Lait"
                        },
                        new
                        {
                            ID = 9,
                            Text = "Épicé"
                        },
                        new
                        {
                            ID = 10,
                            Text = "Grecque"
                        },
                        new
                        {
                            ID = 11,
                            Text = "Mexicain"
                        },
                        new
                        {
                            ID = 12,
                            Text = "Italien"
                        });
                });

            modelBuilder.Entity("RecipesTags", b =>
                {
                    b.Property<int>("RecipeId")
                        .HasColumnType("int");

                    b.Property<int>("TagId")
                        .HasColumnType("int");

                    b.HasKey("RecipeId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("RecipesTags");
                });

            modelBuilder.Entity("Models.Comment", b =>
                {
                    b.HasOne("Models.Recipe", null)
                        .WithMany("Comments")
                        .HasForeignKey("RecipeID");
                });

            modelBuilder.Entity("Models.HomeIngredient", b =>
                {
                    b.HasOne("Models.Recipe", null)
                        .WithMany("HomeIngredients")
                        .HasForeignKey("RecipeID");
                });

            modelBuilder.Entity("Models.Ingredient", b =>
                {
                    b.HasOne("Models.Recipe", null)
                        .WithMany("Ingredients")
                        .HasForeignKey("RecipeID");
                });

            modelBuilder.Entity("Models.Step", b =>
                {
                    b.HasOne("Models.Recipe", null)
                        .WithMany("Steps")
                        .HasForeignKey("RecipeID");
                });

            modelBuilder.Entity("RecipesTags", b =>
                {
                    b.HasOne("Models.Recipe", null)
                        .WithMany()
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Models.Recipe", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("HomeIngredients");

                    b.Navigation("Ingredients");

                    b.Navigation("Steps");
                });
#pragma warning restore 612, 618
        }
    }
}
